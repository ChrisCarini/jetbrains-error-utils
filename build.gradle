/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */
import java.util.regex.Pattern


String properties(String key) { return project.findProperty(key).toString() }

plugins {
    id 'idea'
    id 'java-library'

    // To publish to maven, including maven local: https://www.jetbrains.com/help/idea/add-a-gradle-library-to-the-maven-repository.html#publish
    id 'maven-publish'

    // To fully automate publishing to OSSRH: https://github.com/gradle-nexus/publish-plugin
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'

    id 'signing'

    id 'org.jetbrains.changelog' version '2.2.0'

    // Add IJ gradle plugin in order to allow us to pull a dependency on IntelliJ platform.
    id "org.jetbrains.intellij" version "1.17.3"

    id 'jacoco'

    // provides `taskTree` task (e.g. `./gradlew build taskTree`; docs: https://github.com/dorongold/gradle-task-tree)
    id "com.dorongold.task-tree" version "3.0.0"
}

//apply plugin: 'maven'
apply plugin: 'maven-publish'

// NOTE: For JitPack to allow a custom group (ie, `com.chriscarini.jetbrains`, and not the default of
// 'com.github.ChrisCarini') we need to setup a DNS TXT record (`dig txt git.jetbrains.chriscarini.com`).
//group = 'com.github.ChrisCarini'
group properties("libraryGroup")

version properties("libraryVersion")
ext.isSnapshot = version.endsWith('-SNAPSHOT')

sourceCompatibility = properties("javaVersion")
targetCompatibility = properties("javaVersion")

/**
 * #####################################################################################################################
 * #####################################################################################################################
 *
 * BELOW SECTION TAKEN FROM https://github.com/intellij-dlanguage/intellij-dlanguage (`:utils`, `:errorreporting`, and `:debugger` modules).
 *
 * Ultimately, this just disables all the gradle tasks provided by the 'org.jetbrains.intellij' gradle plugin, as we only
 * want this plugin for the dependencies.
 */

// Disable all Gradle Tasks for the gradle-intellij-plugin as we only use the plugin for the dependencies
project.gradle.taskGraph.whenReady { graph ->
    graph.allTasks.findAll { it.group == 'intellij' }.each {

        if (it.name in [
                // This task is required for this library's tests to work
                'initializeIntelliJPlugin',

                // This task is required for the UI tests to run. Without these, we can not run tests that 
                // subclass off of {@link BasePlatformTestCase}.
                'downloadRobotServerPlugin',
                'instrumentedJar',
                'prepareUiTestingSandbox',
                'runIdeForUiTests',
        ]) {
            logger.info('Skipping disabling \'org.jetbrains.intellij\' task: ' + it.name)
            return
        }
        logger.info('Disabling \'org.jetbrains.intellij\' task: ' + it.name)
        it.enabled = false
    }
}

intellij {
    version.set(properties("platformVersion"))
    downloadSources.set(properties("platformDownloadSources").toBoolean())
    plugins.set(['org.jetbrains.plugins.github']) // Needed for the AuthenticatedGitHubErrorReportSubmitter

    // Note: This gradle task is only needed if `SearchableConfigurable` is used, not `Configurable`. In this
    //       library, we don't use that at all. Therefore, we disable this task.
    //       See https://github.com/ChrisCarini/environment-variable-settings-summary-intellij-plugin/issues/9 for details.
    buildSearchableOptions.enabled = false
}
/**
 * END ABOVE SECTION TAKEN FROM https://github.com/intellij-dlanguage/intellij-dlanguage (`:utils`, `:errorreporting`, and `:debugger` modules).
 *
 * #####################################################################################################################
 * #####################################################################################################################
 */

final String repoUrl = "https://github.com/ChrisCarini/jetbrains-error-utils"

// Configure CHANGELOG.md - https://github.com/JetBrains/gradle-changelog-plugin
// Note: Use all the defaults.
changelog {
    repositoryUrl = repoUrl

    // Custom regex to match the header of the changelog for 4-part versions
    // NOTE: The addition is `(\.(0|[1-9]\d*))*` to allow for an optional 4th 
    // part of the version.
    headerParserRegex = Pattern.compile(/^((0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(\.(0|[1-9]\d*))*(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)${'$'}/)
}

idea {
    module {
        jdkName = '17'
    }
}

repositories {
    mavenCentral()
}

publishing {
    publications.create("mavenJava", MavenPublication) {
        groupId = group
        artifactId = rootProject.name
        version = version

        from components.java
        withoutBuildIdentifier()

        pom {
            name.set("JetBrains Error Utilities")
            description.set("A java library, intended to be consumed by plugins for JetBrains IDEs, providing utilities for handling errors from plugins.")
            url.set(repoUrl)
            inceptionYear.set("2022")
            packaging = "jar"

            licenses {
                license {
                    name.set("The Apache License, Version 2.0")
                    url.set("$repoUrl/blob/main/LICENSE")
                    distribution.set("repo")
                }
            }

            developers {
                developer {
                    id.set("ChrisCarini")
                    name.set("Chris Carini")
                    email.set("6374067+ChrisCarini@users.noreply.github.com")
                    url.set("https://github.com/ChrisCarini")
                }
            }

            scm {
                url.set(repoUrl)
                connection.set("scm:git:${repoUrl}.git")
                developerConnection.set(connection)
            }

            issueManagement {
                system.set("GitHub Issues")
                url.set("$repoUrl/issues")
            }

            ciManagement {
                system.set('GitHub Actions')
                url.set("$repoUrl/actions")
            }
        }
    }

    repositories {
        maven {
            name = 'ChrisCarini_LocalMaven'

            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
        }
        
        // https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-gradle#publishing-packages-to-the-maven-central-repository
        if (System.getenv("OSSRH_MAVEN_USERNAME")) {
            maven {
                name = "OSSRH"

                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = System.getenv("OSSRH_MAVEN_USERNAME")
                    password = System.getenv("OSSRH_MAVEN_PASSWORD")
                }
            }
        }

        // https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-gradle#publishing-packages-to-github-packages
        if (System.getenv("GITHUB_TOKEN")) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/ChrisCarini/jetbrains-error-utils"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

signing {
    useGpgCmd()

    if (System.getenv('PGP_KEY')) {
        useInMemoryPgpKeys(System.getenv('PGP_KEY'), System.getenv('PGP_PWD'))
    }

    sign configurations.archives
    sign publishing.publications.mavenJava
}

tasks {
    sourceCompatibility = properties("javaVersion")
    targetCompatibility = properties("javaVersion")

    // Set the respective compiler arguments to fail the build if there are warnings.
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs.addAll([
                '-Xlint:all',
                '-Xlint:-options',
                '-Xlint:-rawtypes',
                '-Xlint:-processing',
                '-Xlint:-path', // Ignore JBR SDK manifest element warnings
                '-proc:none',
                '-Werror',
                '-Xlint:-classfile'
        ]) //ignore warnings from dependencies
    }
    
    runIdeForUiTests {
        systemProperty("robot-server.port", "8082")
        systemProperty("ide.mac.message.dialogs.as.sheets", "false")
        systemProperty("jb.privacy.policy.text", "<!--999.999-->")
        systemProperty("jb.consents.confirmation.enabled", "false")
    }
}

tasks.named('jar') {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

//// Uncomment to see the paths of where the `publish*PublicationToChrisCarini_LocalMavenRepository` tasks are publishing to.
//project.tasks.withType(PublishToMavenRepository).all { task ->
//    task.doLast {
//        def baseUrl = "${task.repository.url}/${task.publication.groupId.replace('.', '/')}/${task.publication.artifactId}/${task.publication.version}/${task.publication.artifactId}"
//        task.publication.artifacts.each { artifact ->
//            println "${baseUrl}${artifact.classifier ? '-' + artifact.classifier : ''}.${artifact.extension}"
//        }
//    }
//}

java {
    withSourcesJar()
    withJavadocJar()
}

test {
    useTestNG()
    useJUnit()
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:3.+"

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:33.2.0-jre'
}