/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

String properties(String key) { return project.findProperty(key).toString() }

plugins {
    id 'idea'
    id 'java-library'

    // To publish to maven, including maven local: https://www.jetbrains.com/help/idea/add-a-gradle-library-to-the-maven-repository.html#publish
    id 'maven-publish'

    id 'signing'

    id 'org.jetbrains.changelog' version '2.2.0'

    // Add IJ gradle plugin in order to allow us to pull a dependency on IntelliJ platform.
    id "org.jetbrains.intellij" version "1.15.0"
}

//apply plugin: 'maven'
apply plugin: 'maven-publish'

// NOTE: For JitPack to allow a custom group (ie, `com.chriscarini.jetbrains`, and not the default of
// 'com.github.ChrisCarini') we need to setup a DNS TXT record (`dig txt git.jetbrains.chriscarini.com`).
//group = 'com.github.ChrisCarini'
group properties("libraryGroup")

version properties("libraryVersion")
ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

sourceCompatibility = properties("javaVersion")
targetCompatibility = properties("javaVersion")

/**
 * #####################################################################################################################
 * #####################################################################################################################
 *
 * BELOW SECTION TAKEN FROM https://github.com/intellij-dlanguage/intellij-dlanguage (`:utils`, `:errorreporting`, and `:debugger` modules).
 *
 * Ultimately, this just disables all the gradle tasks provided by the 'org.jetbrains.intellij' gradle plugin, as we only
 * want this plugin for the dependencies.
 */

// Disable all Gradle Tasks for the gradle-intellij-plugin as we only use the plugin for the dependencies
project.gradle.taskGraph.whenReady { graph ->
    graph.allTasks.findAll { it.group == 'intellij' }.each {
        logger.info('Disabling \'org.jetbrains.intellij\' task: ' + it.name)
        it.enabled = false
    }
}

intellij {
    version.set(properties("platformVersion"))
    downloadSources.set(properties("platformDownloadSources").toBoolean())
}
/**
 * END ABOVE SECTION TAKEN FROM https://github.com/intellij-dlanguage/intellij-dlanguage (`:utils`, `:errorreporting`, and `:debugger` modules).
 *
 * #####################################################################################################################
 * #####################################################################################################################
 */


// Configure CHANGELOG.md - https://github.com/JetBrains/gradle-changelog-plugin
// Note: Use all the defaults.
changelog {
}

idea {
    module {
        jdkName = '17'
    }
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = rootProject.name
            version = version

            from components.java
            withoutBuildIdentifier()

            pom {
                final String repoUrl = "https://github.com/ChrisCarini/jetbrains-error-utils"

                name.set("JetBrains Error Utilities")
                description.set("A java library, intended to be consumed by plugins for JetBrains IDEs, providing utilities for handling errors from plugins.")
                url.set(repoUrl)
                inceptionYear.set("2022")
                packaging = "jar"

                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("$repoUrl/blob/master/LICENSE")
                        distribution.set("repo")
                    }
                }

                issueManagement {
                    system.set("GitHub")
                    url.set("$repoUrl/issues")
                }

                developers {
                    developer {
                        id.set("ChrisCarini")
                        name.set("Chris Carini")
                        email.set("6374067+ChrisCarini@users.noreply.github.com")
                        url.set("https://github.com/ChrisCarini")
                    }
                }

                scm {
                    url.set(repoUrl)
                    connection.set("scm:git:${repoUrl}.git")
                    developerConnection.set(connection)
                }
            }
        }
    }

    repositories {
//        final String url = isSnapshot ?
//                "https://oss.sonatype.org/content/repositories/snapshots/" :
//                "https://oss.sonatype.org/service/local/staging/deploy/maven2/";
//        maven(url) {
//            credentials(PasswordCredentials::class)
//            name = "osshr"
//        }

        def isSnapshot = version.endsWith('-SNAPSHOT')
        maven {
            name = 'ChrisCarini_LocalMavenRepo'

            url = isSnapshot ?
                    layout.buildDirectory.dir('repos/snapshots') :
                    layout.buildDirectory.dir('repos/releases')
        }
//        maven {
//            name = "osshr"
//            url = isSnapshot ?
//                    "https://s01.oss.sonatype.org/content/repositories/snapshots/" :
//                    "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//            credentials(PasswordCredentials)
//        }
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }

    sign configurations.archives

    sign publishing.publications.mavenJava
}

tasks {
    sourceCompatibility = properties("javaVersion")
    targetCompatibility = properties("javaVersion")

    // Set the respective compiler arguments to fail the build if there are warnings.
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll([
                '-Xlint:all',
                '-Xlint:-options',
                '-Xlint:-rawtypes',
                '-Xlint:-processing',
                '-Xlint:-path', // Ignore JBR SDK manifest element warnings
                '-proc:none',
                '-Werror',
                '-Xlint:-classfile'
        ]) //ignore warnings from dependencies
    }
}

tasks.named('jar') {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

test {
    useTestNG()
    useJUnit()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.0.1-jre'
}